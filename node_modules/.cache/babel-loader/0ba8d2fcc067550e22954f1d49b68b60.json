{"ast":null,"code":"var _jsxFileName = \"/home/mukul/Desktop/react/Sorting_visualizer/Sorting_visualizer/src/components/Sortingvisualizer.js\";\nimport React from 'react';\nimport './Sortingvisualizer.css';\nimport GetAnimationArray from './algorithms/MergeSortAlgo.js';\n\nclass Sortingvisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setArrayLen = e => {\n      console.log(parseInt(e.target.value, 10));\n      const new_length = parseInt(e.target.value, 10);\n      this.setState({\n        array_length: `${new_length}`\n      }); // this.state.array_length=event.target.value;\n    };\n\n    this.state = {\n      array_length: 200,\n      array: []\n    }; // this.setArrayLen = this.setArrayLen.bind(this);\n  }\n\n  componentDidMount() {\n    // this.setState({array_length: 200});\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array_length = this.state.array_length;\n    const array = [];\n\n    for (let i = 0; i < array_length; i++) {\n      array.push(randomInt(5, 1000));\n    }\n\n    this.setState({\n      array: array\n    });\n  }\n\n  MergeSort() {\n    // console.log(\"h\");\n    const height_of_bar = window.innerHeight / 1100; // console.log(this.state.array);\n\n    const animationArray = GetAnimationArray(this.state.array); // console.log(animationArray);\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    for (let i = 0; i < animationArray.length; i++) {\n      const [barone, bartwo] = animationArray[i];\n\n      if (i % 3 == 0) {\n        setTimeout(() => {\n          arrayBars[barone].style.backgroundColor = 'red';\n          arrayBars[bartwo].style.backgroundColor = 'red';\n        }, i * 1);\n      } else if (i % 3 == 1) {\n        setTimeout(() => {\n          arrayBars[barone].style.backgroundColor = 'blue';\n          arrayBars[bartwo].style.backgroundColor = 'blue';\n        }, i * 1);\n      } else {\n        setTimeout(() => {\n          arrayBars[barone].style.height = `${bartwo * height_of_bar}px`;\n        }, i * 1); // console.log(\"j\",typeof(baronestyle.height),typeof(height_of_bartwo),bartwostyle.height,`${height_of_barone}`);\n        // console.log(\"j\");\n        // this.state.array[barone] = actual_array_bar_height_two;\n        // this.state.array[bartwo] = actual_array_bar_height_one;\n      }\n    } // console.log(this.state.array);\n\n  }\n\n  QuickSort() {}\n\n  HeapSort() {}\n\n  BubbleSort() {}\n\n  render() {\n    const {\n      array\n    } = this.state;\n    const array_length = array.length;\n    const width_of_bar = (window.innerWidth - 120) / array_length - 2;\n    const height_of_bar = window.innerHeight / 1100;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      style: {\n        minHeight: `${window.innerHeight}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        width: `${width_of_bar}px`,\n        height: `${value * height_of_bar}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"form\", {\n      onClick: this.setArrayLen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: this.state.array_length,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }, \"enter\")), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }, \"Reset Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.MergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, \"merge sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.QuickSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, \"quick sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.HeapSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, \"heap sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.BubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, \"bubble sort\"));\n  }\n\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default Sortingvisualizer;","map":{"version":3,"sources":["/home/mukul/Desktop/react/Sorting_visualizer/Sorting_visualizer/src/components/Sortingvisualizer.js"],"names":["React","GetAnimationArray","Sortingvisualizer","Component","constructor","props","setArrayLen","e","console","log","parseInt","target","value","new_length","setState","array_length","state","array","componentDidMount","resetArray","i","push","randomInt","MergeSort","height_of_bar","window","innerHeight","animationArray","arrayBars","document","getElementsByClassName","length","barone","bartwo","setTimeout","style","backgroundColor","height","QuickSort","HeapSort","BubbleSort","render","width_of_bar","innerWidth","minHeight","map","idx","width","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Sortingvisualizer.css';\nimport GetAnimationArray from './algorithms/MergeSortAlgo.js';\n\nclass Sortingvisualizer extends React.Component{\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            array_length: 200,\n            array: []\n        };\n        // this.setArrayLen = this.setArrayLen.bind(this);\n    }\n\n    componentDidMount(){\n        // this.setState({array_length: 200});\n        this.resetArray();\n    }\n\n\n    resetArray(){\n        const array_length = this.state.array_length;\n        const array=[];\n        for(let i=0;i<array_length;i++){\n            array.push(randomInt(5,1000));\n        }\n        this.setState({array: array});\n    }\n\n    setArrayLen = (e) => {\n        console.log(parseInt(e.target.value,10));\n        const new_length = parseInt(e.target.value,10);\n        this.setState({array_length: `${new_length}`});    \n        // this.state.array_length=event.target.value;\n    }\n    \n    MergeSort(){\n        // console.log(\"h\");\n        const height_of_bar = (window.innerHeight)/1100;\n\n        // console.log(this.state.array);\n        const animationArray = GetAnimationArray(this.state.array);\n        // console.log(animationArray);\n        const arrayBars = document.getElementsByClassName('array-bar');\n        for(let i=0;i<animationArray.length;i++){\n            \n            const [barone,bartwo] = animationArray[i];\n            \n            if(i%3==0){\n                setTimeout(() => {\n                    arrayBars[barone].style.backgroundColor = 'red';\n                    arrayBars[bartwo].style.backgroundColor = 'red';\n                }, i*1);\n            }\n            else if(i%3==1){\n                setTimeout(() => {\n                    arrayBars[barone].style.backgroundColor = 'blue';\n                    arrayBars[bartwo].style.backgroundColor = 'blue';\n                }, i*1);\n            }\n            else{\n                setTimeout(() => {\n                    arrayBars[barone].style.height = `${bartwo*height_of_bar}px`;\n                }, i*1);    // console.log(\"j\",typeof(baronestyle.height),typeof(height_of_bartwo),bartwostyle.height,`${height_of_barone}`);\n                \n                    // console.log(\"j\");\n                    // this.state.array[barone] = actual_array_bar_height_two;\n                    // this.state.array[bartwo] = actual_array_bar_height_one;\n                \n            }\n        }\n        // console.log(this.state.array);\n    }\n    QuickSort(){}\n    HeapSort(){}\n    BubbleSort(){}   \n\n    render() {\n        const {array}=this.state;\n        const array_length = array.length;\n        const width_of_bar = ((window.innerWidth-120)/array_length)-2;\n        const height_of_bar = (window.innerHeight)/1100; \n\n        return (            \n            <div className=\"array-container\" style={\n                {minHeight: `${window.innerHeight}px`}\n            }>\n                {/* <input type=\"text\" placeholder=\"length_of_array\" > </input> */}\n                {array.map((value,idx) => (\n                    <div className=\"array-bar\" key={idx} style={\n                        {width:`${width_of_bar}px`,height:`${value*height_of_bar}px`}\n                    }></div>\n                ))}\n                <form onClick={this.setArrayLen}>\n                    <input type='text' placeholder={this.state.array_length} />\n                    <button type=\"submit\">enter</button>\n                </form>\n                <button onClick={() => (this.resetArray())}>Reset Array</button>\n                <button onClick={() => (this.MergeSort())}>merge sort</button>\n                <button onClick={() => (this.QuickSort())}>quick sort</button>\n                <button onClick={() => (this.HeapSort())}>heap sort</button>\n                <button onClick={() => (this.BubbleSort())}>bubble sort</button>\n            </div>\n        );\n    }\n\n}\n\nfunction randomInt(min,max){\n    return Math.floor(Math.random()*(max-min+1)+min);\n}\n\n\nexport default Sortingvisualizer;"]},"metadata":{},"sourceType":"module"}