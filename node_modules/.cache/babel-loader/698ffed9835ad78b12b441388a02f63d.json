{"ast":null,"code":"var _jsxFileName = \"/home/mukul/Desktop/react/learnreact/src/components/Sortingvisualizer.js\";\nimport React from 'react';\nimport './Sortingvisualizer.css';\nimport GetAnimationArray from './algorithms/MergeSortAlgo.js';\n\nclass Sortingvisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array_length = 200;\n    const array = [];\n\n    for (let i = 0; i < array_length; i++) {\n      array.push(randomInt(5, 1000));\n    }\n\n    this.setState({\n      array: array\n    });\n  }\n\n  MergeSort() {\n    // console.log(\"h\");\n    const animationArray = GetAnimationArray(this.state.array); // console.log(animationArray);\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    for (let i = 0; i < animationArray.length; i++) {\n      console.log(animationArray[i]);\n      const [barone, bartwo] = animationArray[i];\n      const height_of_barone = arrayBars[barone].style.height;\n      const height_of_bartwo = arrayBars[bartwo].style.height;\n      setTimeout(() => {\n        arrayBars[barone].style.backgroundColor = 'red';\n        arrayBars[bartwo].style.backgroundColor = 'red';\n      }, i * 3);\n\n      if (height_of_barone > height_of_bartwo) {\n        arrayBars[barone].height = height_of_bartwo;\n        arrayBars[bartwo].height = height_of_barone;\n      }\n\n      arrayBars[barone].style.backgroundColor = 'blue';\n      arrayBars[bartwo].style.backgroundColor = 'blue';\n    }\n  }\n\n  QuickSort() {}\n\n  HeapSort() {}\n\n  BubbleSort() {}\n\n  render() {\n    const {\n      array\n    } = this.state;\n    const array_length = array.length;\n    const width_of_bar = (window.innerWidth - 120) / array_length - 2;\n    const height_of_bar = window.innerHeight / 1100;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        width: `${width_of_bar}px`,\n        height: `${value * height_of_bar}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }, \"Reset Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.MergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }, \"merge sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.QuickSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }, \"quick sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.HeapSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, \"heap sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.BubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, \"bubble sort\"));\n  }\n\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default Sortingvisualizer;","map":{"version":3,"sources":["/home/mukul/Desktop/react/learnreact/src/components/Sortingvisualizer.js"],"names":["React","GetAnimationArray","Sortingvisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","array_length","i","push","randomInt","setState","MergeSort","animationArray","arrayBars","document","getElementsByClassName","length","console","log","barone","bartwo","height_of_barone","style","height","height_of_bartwo","setTimeout","backgroundColor","QuickSort","HeapSort","BubbleSort","render","width_of_bar","window","innerWidth","height_of_bar","innerHeight","map","value","idx","width","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Sortingvisualizer.css';\nimport GetAnimationArray from './algorithms/MergeSortAlgo.js';\n\nclass Sortingvisualizer extends React.Component{\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            array: []\n        };\n    }\n\n    componentDidMount(){\n        this.resetArray();\n    }\n\n\n    resetArray(){\n        const array_length = 200;\n        const array=[];\n        for(let i=0;i<array_length;i++){\n            array.push(randomInt(5,1000));\n        }\n        this.setState({array: array});\n    }\n    \n    MergeSort(){\n        // console.log(\"h\");\n        const animationArray = GetAnimationArray(this.state.array);\n        // console.log(animationArray);\n        const arrayBars = document.getElementsByClassName('array-bar');\n        for(let i=0;i<animationArray.length;i++){\n            console.log(animationArray[i]);\n            const [barone,bartwo] = animationArray[i];\n            const height_of_barone = arrayBars[barone].style.height;\n            const height_of_bartwo = arrayBars[bartwo].style.height;\n            setTimeout(() => {\n                arrayBars[barone].style.backgroundColor = 'red';\n                arrayBars[bartwo].style.backgroundColor = 'red';\n            }, i*3);\n            if(height_of_barone > height_of_bartwo){\n                arrayBars[barone].height = height_of_bartwo;\n                arrayBars[bartwo].height = height_of_barone;\n            }\n            arrayBars[barone].style.backgroundColor = 'blue';\n            arrayBars[bartwo].style.backgroundColor = 'blue';\n        }\n    }\n    QuickSort(){}\n    HeapSort(){}\n    BubbleSort(){}   \n\n    render() {\n        const {array}=this.state;\n        const array_length = array.length;\n        const width_of_bar = ((window.innerWidth-120)/array_length)-2;\n        const height_of_bar = (window.innerHeight)/1100; \n\n        return (\n            <div className=\"array-container\">\n                {array.map((value,idx) => (\n                    <div className=\"array-bar\" key={idx} style={\n                        {width:`${width_of_bar}px`,height:`${value*height_of_bar}px`}\n                    }></div>\n                ))}\n                <button onClick={() => (this.resetArray())}>Reset Array</button>\n                <button onClick={() => (this.MergeSort())}>merge sort</button>\n                <button onClick={() => (this.QuickSort())}>quick sort</button>\n                <button onClick={() => (this.HeapSort())}>heap sort</button>\n                <button onClick={() => (this.BubbleSort())}>bubble sort</button>\n            </div>\n        );\n    }\n\n}\n\nfunction randomInt(min,max){\n    return Math.floor(Math.random()*(max-min+1)+min);\n}\n\n\nexport default Sortingvisualizer;"]},"metadata":{},"sourceType":"module"}