{"ast":null,"code":"// export function GetAnimationArray(array){\n//     const animation =[];\n//     if(array.length()<=1)   return array;\n// }\nexport default function GetAnimationArray(array) {\n  const sortedArray = array;\n  const len = array.length;\n  console.log(sortedArray);\n  MergeSortAlgo(sortedArray, 0, len - 1);\n  console.log(sortedArray);\n  return sortedArray;\n}\n\nfunction MergeSortAlgo(array, startInd, endInd) {\n  if (endInd <= startInd) return;\n  const mid = Math.floor((endInd - startInd) / 2) + startInd;\n  MergeSortAlgo(array, startInd, mid);\n  MergeSortAlgo(array, mid + 1, endInd); // console.log(\" array \",array);\n\n  Merge(array, startInd, mid, endInd);\n}\n\nfunction Merge(array, startInd, mid, endInd) {\n  let i = startInd;\n  let j = mid + 1;\n  const left = [];\n  const right = [];\n  let k = 0;\n\n  for (k = startInd; k <= mid; k++) {\n    console.log(startInd, k);\n    left.push(array[k]);\n  }\n\n  for (k = mid + 1; k <= endInd; k++) {\n    right.push(array[k]);\n  }\n\n  console.log(left.length, right.length);\n  k = startInd;\n\n  while (i <= mid && j <= endInd) {\n    console.log(i, j);\n\n    if (left[i - startInd] <= right[j - mid - 1]) {\n      array[k++] = left[i - startInd];\n      i++;\n    } else {\n      array[k++] = right[j - mid - 1];\n      j++;\n    }\n  }\n\n  while (i <= mid) {\n    array[k++] = left[i - startInd];\n    i++;\n  }\n\n  while (j <= endInd) {\n    array[k++] = right[j - mid - 1];\n    j++;\n  }\n}","map":{"version":3,"sources":["/home/mukul/Desktop/react/learnreact/src/components/algorithms/MergeSortAlgo.js"],"names":["GetAnimationArray","array","sortedArray","len","length","console","log","MergeSortAlgo","startInd","endInd","mid","Math","floor","Merge","i","j","left","right","k","push"],"mappings":"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","sourcesContent":["\n\n// export function GetAnimationArray(array){\n//     const animation =[];\n//     if(array.length()<=1)   return array;\n// }\n\nexport default function GetAnimationArray(array){\n    const sortedArray = array;\n    const len = array.length;\n    console.log(sortedArray);\n    MergeSortAlgo(sortedArray,0,len-1);\n    console.log(sortedArray);\n    return sortedArray;\n}\n\nfunction MergeSortAlgo(array,startInd,endInd){\n    if(endInd<=startInd)   return;\n    const mid =Math.floor((endInd-startInd)/2)+startInd;\n    MergeSortAlgo(array,startInd,mid);\n    MergeSortAlgo(array,mid+1,endInd);\n    // console.log(\" array \",array);\n    Merge(array,startInd,mid,endInd);\n}\n\nfunction Merge(array,startInd,mid,endInd){\n    let i=startInd;\n    let j=mid+1;\n    const left = [];\n    const right = [];\n    let k=0;\n    for(k=startInd;k<=mid;k++){\n        console.log(startInd,k);\n        left.push(array[k]);\n    }\n    for(k=mid+1;k<=endInd;k++){\n        right.push(array[k]);\n    }\n    console.log(left.length,right.length);\n    k=startInd;\n    while(i <= mid && j <= endInd){\n        console.log(i,j);\n        if(left[i-startInd] <= right[j-mid-1]){\n            array[k++]=left[i-startInd];\n            i++;\n        }\n        else{\n            array[k++]=right[j-mid-1];\n            j++;\n        }\n    }\n    while(i<=mid){\n        array[k++]=left[i-startInd];\n        i++;\n    }\n    while(j<=endInd){\n        array[k++]=right[j-mid-1];\n        j++;\n    }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}