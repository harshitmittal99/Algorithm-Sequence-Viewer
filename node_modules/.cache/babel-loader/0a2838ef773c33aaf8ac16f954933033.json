{"ast":null,"code":"// export function GetAnimationArray(array){\n//     const animation =[];\n//     if(array.length()<=1)   return array;\n// }\nexport default function GetAnimationArray(array){var sortedArray=array;var len=array.length;console.log(sortedArray);MergeSortAlgo(sortedArray,0,len-1);console.log(sortedArray);return sortedArray;}function MergeSortAlgo(array,startInd,endInd){if(endInd<=startInd)return;var mid=(endInd-startInd)/2+startInd;MergeSortAlgo(array,startInd,mid);MergeSortAlgo(array,mid+1,endInd);// console.log(\" array \",array);\nMerge(array,startInd,mid,endInd);}function Merge(array,startInd,mid,endInd){var i=startInd;var j=mid+1;var left=[];var right=[];for(var _k=startInd;_k<mid+1;_k+=1){console.log(_k);left.push(array[_k]);}for(var _k2=mid+1;_k2<=endInd;_k2++){right.push(array[_k2]);}console.log(left.length,right.length);var k=startInd;while(i<=mid&&j<=endInd){if(left[i-startInd]<=right[j-mid-1]){array[k++]=left[i-startInd];i++;}else{array[k++]=right[j-mid-1];j++;}}while(i<=mid){array[k++]=left[i-startInd];i++;}while(j<=endInd){array[k++]=right[j-mid-1];j++;}}","map":{"version":3,"sources":["/home/mukul/Desktop/react/learnreact/src/components/algorithms/MergeSortAlgo.js"],"names":["GetAnimationArray","array","sortedArray","len","length","console","log","MergeSortAlgo","startInd","endInd","mid","Merge","i","j","left","right","k","push"],"mappings":"AAEA;AACA;AACA;AACA;AAEA,cAAe,SAASA,CAAAA,iBAAT,CAA2BC,KAA3B,CAAiC,CAC5C,GAAMC,CAAAA,WAAW,CAAGD,KAApB,CACA,GAAME,CAAAA,GAAG,CAAGF,KAAK,CAACG,MAAlB,CACAC,OAAO,CAACC,GAAR,CAAYJ,WAAZ,EACAK,aAAa,CAACL,WAAD,CAAa,CAAb,CAAeC,GAAG,CAAC,CAAnB,CAAb,CACAE,OAAO,CAACC,GAAR,CAAYJ,WAAZ,EACA,MAAOA,CAAAA,WAAP,CACH,CAED,QAASK,CAAAA,aAAT,CAAuBN,KAAvB,CAA6BO,QAA7B,CAAsCC,MAAtC,CAA6C,CACzC,GAAGA,MAAM,EAAED,QAAX,CAAuB,OACvB,GAAME,CAAAA,GAAG,CAAG,CAACD,MAAM,CAACD,QAAR,EAAkB,CAAnB,CAAsBA,QAAjC,CACAD,aAAa,CAACN,KAAD,CAAOO,QAAP,CAAgBE,GAAhB,CAAb,CACAH,aAAa,CAACN,KAAD,CAAOS,GAAG,CAAC,CAAX,CAAaD,MAAb,CAAb,CACA;AACAE,KAAK,CAACV,KAAD,CAAOO,QAAP,CAAgBE,GAAhB,CAAoBD,MAApB,CAAL,CACH,CAED,QAASE,CAAAA,KAAT,CAAeV,KAAf,CAAqBO,QAArB,CAA8BE,GAA9B,CAAkCD,MAAlC,CAAyC,CACrC,GAAIG,CAAAA,CAAC,CAACJ,QAAN,CACA,GAAIK,CAAAA,CAAC,CAACH,GAAG,CAAC,CAAV,CACA,GAAMI,CAAAA,IAAI,CAAG,EAAb,CACA,GAAMC,CAAAA,KAAK,CAAG,EAAd,CACA,IAAI,GAAIC,CAAAA,EAAC,CAACR,QAAV,CAAmBQ,EAAC,CAACN,GAAG,CAAC,CAAzB,CAA2BM,EAAC,EAAE,CAA9B,CAAgC,CAC5BX,OAAO,CAACC,GAAR,CAAYU,EAAZ,EACAF,IAAI,CAACG,IAAL,CAAUhB,KAAK,CAACe,EAAD,CAAf,EACH,CACD,IAAI,GAAIA,CAAAA,GAAC,CAACN,GAAG,CAAC,CAAd,CAAgBM,GAAC,EAAEP,MAAnB,CAA0BO,GAAC,EAA3B,CAA8B,CAC1BD,KAAK,CAACE,IAAN,CAAWhB,KAAK,CAACe,GAAD,CAAhB,EACH,CACDX,OAAO,CAACC,GAAR,CAAYQ,IAAI,CAACV,MAAjB,CAAwBW,KAAK,CAACX,MAA9B,EACA,GAAIY,CAAAA,CAAC,CAACR,QAAN,CACA,MAAMI,CAAC,EAAIF,GAAL,EAAYG,CAAC,EAAIJ,MAAvB,CAA8B,CAC1B,GAAGK,IAAI,CAACF,CAAC,CAACJ,QAAH,CAAJ,EAAoBO,KAAK,CAACF,CAAC,CAACH,GAAF,CAAM,CAAP,CAA5B,CAAsC,CAClCT,KAAK,CAACe,CAAC,EAAF,CAAL,CAAWF,IAAI,CAACF,CAAC,CAACJ,QAAH,CAAf,CACAI,CAAC,GACJ,CAHD,IAII,CACAX,KAAK,CAACe,CAAC,EAAF,CAAL,CAAWD,KAAK,CAACF,CAAC,CAACH,GAAF,CAAM,CAAP,CAAhB,CACAG,CAAC,GACJ,CACJ,CACD,MAAMD,CAAC,EAAEF,GAAT,CAAa,CACTT,KAAK,CAACe,CAAC,EAAF,CAAL,CAAWF,IAAI,CAACF,CAAC,CAACJ,QAAH,CAAf,CACAI,CAAC,GACJ,CACD,MAAMC,CAAC,EAAEJ,MAAT,CAAgB,CACZR,KAAK,CAACe,CAAC,EAAF,CAAL,CAAWD,KAAK,CAACF,CAAC,CAACH,GAAF,CAAM,CAAP,CAAhB,CACAG,CAAC,GACJ,CAEJ","sourcesContent":["\n\n// export function GetAnimationArray(array){\n//     const animation =[];\n//     if(array.length()<=1)   return array;\n// }\n\nexport default function GetAnimationArray(array){\n    const sortedArray = array;\n    const len = array.length;\n    console.log(sortedArray);\n    MergeSortAlgo(sortedArray,0,len-1);\n    console.log(sortedArray);\n    return sortedArray;\n}\n\nfunction MergeSortAlgo(array,startInd,endInd){\n    if(endInd<=startInd)   return;\n    const mid =((endInd-startInd)/2)+startInd;\n    MergeSortAlgo(array,startInd,mid);\n    MergeSortAlgo(array,mid+1,endInd);\n    // console.log(\" array \",array);\n    Merge(array,startInd,mid,endInd);\n}\n\nfunction Merge(array,startInd,mid,endInd){\n    let i=startInd;\n    let j=mid+1;\n    const left = [];\n    const right = [];\n    for(let k=startInd;k<mid+1;k+=1){\n        console.log(k);\n        left.push(array[k]);\n    }\n    for(let k=mid+1;k<=endInd;k++){\n        right.push(array[k]);\n    }\n    console.log(left.length,right.length);\n    let k=startInd;\n    while(i <= mid && j <= endInd){\n        if(left[i-startInd] <= right[j-mid-1]){\n            array[k++]=left[i-startInd];\n            i++;\n        }\n        else{\n            array[k++]=right[j-mid-1];\n            j++;\n        }\n    }\n    while(i<=mid){\n        array[k++]=left[i-startInd];\n        i++;\n    }\n    while(j<=endInd){\n        array[k++]=right[j-mid-1];\n        j++;\n    }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}