{"ast":null,"code":"// export function GetAnimationArray(array){\n//     const animation =[];\n//     if(array.length()<=1)   return array;\n// }\nexport default function GetAnimationArray(array) {\n  const animationArray = [];\n  const sortedArray = array;\n  const len = array.length; // console.log(sortedArray);\n\n  MergeSortAlgo(animationArray, sortedArray, 0, len - 1); // console.log(sortedArray);\n\n  return animationArray;\n}\n\nfunction MergeSortAlgo(animationArray, array, startInd, endInd) {\n  if (endInd <= startInd) return;\n  const mid = Math.floor((endInd - startInd) / 2) + startInd;\n  MergeSortAlgo(animationArray, array, startInd, mid);\n  MergeSortAlgo(animationArray, array, mid + 1, endInd); // console.log(\" array \",array);\n\n  Merge(animationArray, array, startInd, mid, endInd);\n}\n\nfunction Merge(animationArray, array, startInd, mid, endInd) {\n  let i = startInd;\n  let j = mid + 1;\n  const left = [];\n  const right = [];\n  let k = 0;\n\n  for (k = startInd; k <= mid; k++) {\n    // console.log(startInd,k);\n    left.push(array[k]);\n  }\n\n  for (k = mid + 1; k <= endInd; k++) {\n    right.push(array[k]);\n  } // console.log(left.length,right.length);\n\n\n  k = startInd;\n\n  while (i <= mid && j <= endInd) {\n    // console.log(i,j);\n    if (left[i - startInd] <= right[j - mid - 1]) {\n      animationArray.push([i, j]);\n      animationArray.push([i, j]);\n      animationArray.push([k, left[i - startInd]]);\n      array[k++] = left[i - startInd];\n      i++;\n    } else {\n      animationArray.push([i, j]);\n      animationArray.push([i, j]);\n      animationArray.push([k, right[j - mid - 1]]);\n      array[k++] = right[j - mid - 1];\n      j++;\n    }\n  }\n\n  while (i <= mid) {\n    animationArray.push([i, i]);\n    animationArray.push([i, i]);\n    animationArray.push([k, left[i - startInd]]);\n    array[k++] = left[i - startInd];\n    i++;\n  }\n\n  while (j <= endInd) {\n    animationArray.push([j, j]);\n    animationArray.push([j, j]);\n    animationArray.push([k, right[j - mid - 1]]);\n    array[k++] = right[j - mid - 1];\n    j++;\n  }\n}","map":{"version":3,"sources":["/home/mukul/Desktop/react/Sorting_visualizer/Sorting_visualizer/src/components/algorithms/MergeSortAlgo.js"],"names":["GetAnimationArray","array","animationArray","sortedArray","len","length","MergeSortAlgo","startInd","endInd","mid","Math","floor","Merge","i","j","left","right","k","push"],"mappings":"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","sourcesContent":["\n\n// export function GetAnimationArray(array){\n//     const animation =[];\n//     if(array.length()<=1)   return array;\n// }\n\nexport default function GetAnimationArray(array){\n    const animationArray = [];\n    const sortedArray = array;\n    const len = array.length;\n    // console.log(sortedArray);\n    MergeSortAlgo(animationArray,sortedArray,0,len-1);\n    // console.log(sortedArray);\n    return animationArray;\n}\n\nfunction MergeSortAlgo(animationArray,array,startInd,endInd){\n    if(endInd<=startInd)   return;\n    const mid =Math.floor((endInd-startInd)/2)+startInd;\n    MergeSortAlgo(animationArray,array,startInd,mid);\n    MergeSortAlgo(animationArray,array,mid+1,endInd);\n    // console.log(\" array \",array);\n    Merge(animationArray,array,startInd,mid,endInd);\n}\n\nfunction Merge(animationArray,array,startInd,mid,endInd){\n    let i=startInd;\n    let j=mid+1;\n    const left = [];\n    const right = [];\n    let k=0;\n    for(k=startInd;k<=mid;k++){\n        // console.log(startInd,k);\n        left.push(array[k]);\n    }\n    for(k=mid+1;k<=endInd;k++){\n        right.push(array[k]);\n    }\n    // console.log(left.length,right.length);\n    k=startInd;\n    while(i <= mid && j <= endInd){\n        // console.log(i,j);\n        if(left[i-startInd] <= right[j-mid-1]){\n            animationArray.push([i,j]);\n            animationArray.push([i,j]);\n            animationArray.push([k,left[i-startInd]]);\n            array[k++]=left[i-startInd];\n            i++;\n        }\n        else{\n            animationArray.push([i,j]);\n            animationArray.push([i,j]);\n            animationArray.push([k,right[j-mid-1]]);\n            array[k++]=right[j-mid-1];\n            j++;\n        }\n    }\n    while(i<=mid){\n        animationArray.push([i,i]);\n        animationArray.push([i,i]);\n\n        animationArray.push([k,left[i-startInd]]);\n        array[k++]=left[i-startInd];\n        i++;\n    }\n    while(j<=endInd){\n        animationArray.push([j,j]);\n        animationArray.push([j,j]);\n        animationArray.push([k,right[j-mid-1]]);\n        array[k++]=right[j-mid-1];\n        j++;\n    }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}